"use strict";!function(){function t(t,i){if(!1===((e=t)instanceof HTMLInputElement&&["text","email"].includes(e.type)))throw new Error("not a text input");var e;if(this.inputEl=t,this.options=i||{},this.options.pattern=this.options.pattern||this.inputEl.getAttribute("pattern"),this.options.required=this.options.required||this.inputEl.required,void 0===this.options.autoInit&&(this.options.autoInit=!0),void 0===this.options.notices&&(this.options.notices=!0),null===this.options.pattern&&!0!==this.options.required)throw new Error("either pattern must be set or field must be required");this.val=this.validate.bind(this),!0===this.options.autoInit&&this.enable()}t.prototype={validate:function(){var t=this.inputEl.value;if(this.options.required&&""===t)try{this.options.requiredCallback(this.inputEl)}catch(t){this.options.notices&&console.log("Validator Notice: Element was set as required, but no requiredCallback function was provided. Set options.notices = false to eliminate these messages.")}else{if(null!==this.options.pattern)if(!new RegExp(this.options.pattern).test(t)){try{this.options.patternCallback(this.inputEl)}catch(t){this.options.notices&&console.log("Validator Notice: Input failed the provided pattern, but no patternCallback function was provided. Set options.notices = false to eliminate these messages.")}return}try{this.options.successCallback(this.inputEl)}catch(t){this.options.notices&&console.log("Notice: All validation tests passed, but no successCallback was provided. Set options.notices = false to eliminate these messages.")}}},enable:function(){this.disable(),this.inputEl.addEventListener("input",this.val),this.inputEl.addEventListener("blur",this.val)},disable:function(){this.inputEl.removeEventListener("input",this.val),this.inputEl.removeEventListener("blur",this.val)}},window.Validator=window.Validator||t}();